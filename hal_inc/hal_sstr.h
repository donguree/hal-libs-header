/******************************************************************************
 *   DTV LABORATORY, LG ELECTRONICS INC., SEOUL, KOREA
 *   Copyright(c) 1999 by LG Electronics Inc.
 *
 *   All rights reserved. No part of this work may be reproduced, stored in a
 *   retrieval system, or transmitted by any means without prior written
 *   permission of LG Electronics Inc.
 *****************************************************************************/

/** @file
 *
 *	This source file defines WebOS Secure Storage Function
 *
 *  @author     stan.kim@lge.com
 *  @version    1.0
 *  @date       2016.4
 *  @note       Additional information.
 */

/******************************************************************************
 	Header File Guarder
******************************************************************************/
#ifndef	_HAL_SSTR_H_
#define	_HAL_SSTR_H_

/******************************************************************************
 #include 파일들 (File Inclusions)
******************************************************************************/
#include "hal_common.h"

/******************************************************************************
	형 정의 (Type Definitions)
******************************************************************************/
// Common Error Code
typedef enum {
	HAL_SSTR_R_OK				= 0,	/**< OK */
	HAL_SSTR_R_GENERAL_ERROR	= -1,	/**< unspecified error */
	HAL_SSTR_R_TEE_FAILURE		= -2,	/**< TEE Problem */
	HAL_SSTR_R_INVALID_BUFSIZE	= -3,	/**< Given buffer size is not enough */
	HAL_SSTR_R_INVALID_KEY		= -4,	/**< pKey is not a type of "Protected SDHK" */
	HAL_SSTR_R_NOT_MATCH		= -5,	/**< HMAC value is not matched */
} HAL_SSTR_R_T;

/******************************************************************************
    매크로 함수 정의 (Macro Definitions)
******************************************************************************/

/******************************************************************************
   로컬 상수 정의 (Local Constant Definitions)
******************************************************************************/

/******************************************************************************
    로컬 형 정의 (Local Type Definitions)
******************************************************************************/

/******************************************************************************
    전역 형 정의 (Global Type Definitions)
******************************************************************************/

/******************************************************************************
    Extern 전역변수와 함수 prototype 선언
    (Extern Variables & Function Prototype Declarations)
******************************************************************************/

/******************************************************************************
    Static 변수와 함수 prototype 선언
    (Static Variables & Function Prototypes Declarations)
******************************************************************************/

/******************************************************************************
    로컬 변수와 함수 prototype 선언
    (Local Variables & Function Prototypes Declarations)
******************************************************************************/

/******************************************************************************
    전역 변수와 함수 prototype 선언
    (Global Variables & Function Prototypes Declarations)
******************************************************************************/

/******************************************************************************
	함수 정의 (Function Definitions)
******************************************************************************/


/**
 *	HAL_SSTR_MakeSecureData
 *
 *	@param	nSrcLen 	[in]	size of pSrcData
 *	@param	pSrcData	[in]	buffer for data to be encrypted
 *	@param	pDstLen 	[out]	sizeof pDstData
 *	@param	pDstData	[out]	buffer to store SecureData
 *	@param	pszDataType	[in]	data type
 *	@return Common Error Code.
 */
HAL_SSTR_R_T HAL_SSTR_MakeSecureData(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData, char *pszDataType);

/**
 *	HAL_SSTR_GetDataFromSecureData
 *
 *	@param	nSrcLen		[in]	size of pSrcData
 *	@param	pSrcData	[in]	buffer for data to be decrypted
 *	@param	pDstLen		[out]	sizeof pDstData
 *	@param	pDstData	[out]	buffer to store the decrypted data
 *  @return Common Error Code.
 */
HAL_SSTR_R_T HAL_SSTR_GetDataFromSecureData(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData);

/**
 *	HAL_SSTR_GetHMAC
 *
 *	@param	nDataSize	[in]	size of pData
 *	@param	pData		[in]	source data for HMAC
 *	@param	pKey		[out]	Buffer for Protected SDHK generated by TEE.
 *	@param	pHMAC		[out]	Buffer to store HMAC value calculated by TEE
 *  @return Common Error Code.
 */
HAL_SSTR_R_T HAL_SSTR_GetHMAC(UINT32 nDataSize, UINT8 *pData, UINT8 *pKey, UINT8 *pHMAC);

/**
 *	HAL_SSTR_VerifyHMAC
 *
 *	@param	nDataSize	[in]	size of pData
 *	@param	pData		[in]	source data for HMAC
 *	@param	pKey		[in]	Protected SDHK
 *	@param	pHMAC		[in]	HMAC value
 *  @return Common Error Code.
 */
HAL_SSTR_R_T HAL_SSTR_VerifyHMAC(UINT32 nDataSize, UINT8 *pData, UINT8 *pKey, UINT8 *pHMAC);

/**
 *	HAL_SSTR_GenAESKey
 *
 *	@param	nSize	[in]	Size of key to be generated
 *	@param	pKey	[out]	Buffer to store the generated key
 *  @return Common Error Code.
 */
HAL_SSTR_R_T HAL_SSTR_GenAESKey(UINT32 nSize, UINT8 *pKey);

/* SSTR TEE Crypto */
HAL_SSTR_R_T HAL_SSTR_AES_Encrypt(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData,
	char *pszMode, UINT8 *pKey, UINT32 nKeySize);
HAL_SSTR_R_T HAL_SSTR_AES_Decrypt(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData,
	char *pszMode, UINT8 *pKey, UINT32 nKeySize);
HAL_SSTR_R_T HAL_SSTR_RSA_Encrypt(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData,
	char *pszKeyType, UINT8 *pKey, UINT32 nKeySize);
HAL_SSTR_R_T HAL_SSTR_RSA_Decrypt(UINT32 nSrcLen, UINT8 *pSrcData, UINT32 *pDstLen, UINT8 *pDstData,
	char *pszKeyType, UINT8 *pKey, UINT32 nKeySize);
HAL_SSTR_R_T HAL_SSTR_RSA_Sign(UINT32 nDataSize, UINT8 *pData, UINT32 *pSigLen, UINT8 *pSig,
	char *pszKeyType, UINT8 *pKey, UINT32 nKeySize);
HAL_SSTR_R_T HAL_SSTR_RSA_Verify(UINT32 nDataSize, UINT8 *pData, UINT32 nSigLen, UINT8 *pSig,
	char *pszKeyType, UINT8 *pKey, UINT32 nKeySize);


#endif		//_HAL_SSTR_H_

